name: Code validation and document generation
description: Run poetry tests an generate fastapi docs 

inputs:
  app-name:
    description: Name of the App
    required: true
  environment:
    description: Environment this action runs on
    required: true
  work-dir:
    description: Location of all the App related files
    required: true
  python-version:   
    description: Version of python app is using
    required: true
  portal-url: 
    description: Server path to store files
    required: true

outputs:
  REDOC_LINKS: # id of output
    description: "Redoc documents links"
    value: ${{ steps.redoc.outputs.REDOC_LINKS }}
  COVERAGE_LINKS:
    description: "Link to coverage report"
    value: ${{ steps.cov_link.outputs.COVERAGE_LINKS }}

runs:
  using: "composite"
  steps:
  ## Poetry tests
    - name: Check out repository
      uses: actions/checkout@v4.1.1

    - name: Set up python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ inputs.python-version }}

    - name: Load cached Poetry installation
      id: poetry-cache
      uses: actions/cache@v3.3.2
      with:
        path: ~/.local # the path depends on the OS
        key: poetry-${{ inputs.work-dir }}  # increment to reset cache

    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      if: steps.poetry-cache.outputs.cache-hit != 'true'

    - name: Load cached venv
      id: venv-cache
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ inputs.work-dir }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.venv-cache.outputs.cache-hit != 'true'
      run: |
        cd ${{ inputs.work-dir }}
        poetry env use ${{ inputs.python-version }}
        poetry install --no-interaction --no-root
      shell: bash  

    - name: Run poethepoet 
      run: |
        cd ${{ inputs.work-dir }}
        source config.sh.example && poetry run poe codevalidation
      shell: bash

    - name: Generate xml report
      run: |
        cd ${{ inputs.work-dir }}
        source config.sh.example && poetry run pytest --cov --cov-report=xml:coverage.xml
      shell: bash

    - name: Upload xml reports
      uses: actions/upload-artifact@v4.1.0
      with:
        name: xml-reports
        path: ${{ inputs.work-dir }}/coverage.xml 
        retention-days: 5  

# Doc generation
    - name: Get PR branch  # this only works on a PR not on a branch 
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/*/})" >> $GITHUB_ENV
      shell: bash

    - name: Set branch name
      if: ${{ github.ref != 'refs/heads/main' }}
      run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
      shell: bash

    - name: Get repo name
      run: echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
      shell: bash

    - name: Clean old models
      if: ${{ github.ref == 'refs/heads/main' }}
      run: rm /mnt/samba/${{ env.REPO_NAME }}/main_*  2> /dev/null || true # to avoid permissions issue, remove main files first 
      shell: bash

    - name: Clean old models
      if: ${{ github.ref == 'refs/heads/main' }}
      run: rm /mnt/samba/${{ env.REPO_NAME }}/main_*  2> /dev/null || true # to avoid permissions issue, remove main files first 
      shell: bash

    - name: Generate documentation links
      id: redoc
      run: |
        cd ${{ inputs.work-dir }}
        [ -d /mnt/samba/${{ env.REPO_NAME }} ] || mkdir -p /mnt/samba/${{ env.REPO_NAME }}
        LINKS=(`source config.sh.example && poetry run python generate_openapi_docs.py ${{ env.BRANCH_NAME }} "/mnt/samba/${{ env.REPO_NAME }}" "${{ inputs.portal-url }}/redoc.html?repo=${{ env.REPO_NAME }}&branch="`)
        echo "REDOC_LINKS=${LINKS[@]}" >> $GITHUB_OUTPUT
      shell: bash  
      
    - name: Generate coverage html link 
      id: cov_link
      run: | 
        cd ${{ inputs.work-dir }}
        COVERAGE=(`source config.sh.example && poetry run pytest --cov --cov-report=html:/mnt/samba/${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}/${{inputs.app-name}}/coverage`)
        echo "COVERAGE_LINKS=${{ inputs.portal-url }}/coverage.html?repo=${{ env.REPO_NAME }}&branch=${{ env.BRANCH_NAME }}&app=${{inputs.app-name}}" >> $GITHUB_OUTPUT
      shell: bash  
